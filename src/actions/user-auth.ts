import type { UserObject, BackendJWT, BackendAccessJWT } from "next-auth";
import { v4 as uuidv4 } from "uuid";

var jwt = require("jsonwebtoken");

/**
 * Log in a user by sending a POST request to the backend using the supplied credentials.
 *
 * TODO: Implement the actual login functionality by sending a POST request to the backend
 *
 * @param email The email of the user
 * @param password The password of the user
 * @returns A BackendJWT response from the backend.
 */
export async function login(
  email: string,
  password: string
): Promise<Response> {
  console.debug("Logging in");

  if (!email) {
    throw new Error("Email is required");
  }
  if (!password) {
    throw new Error("Password is required");
  }

  // Dummy data to simulate a successful login
  const mock_data: BackendJWT = {
    access: create_access_token(),
    refresh: create_refresh_token()
  };

  return new Response(JSON.stringify(mock_data), {
    status: 200,
    statusText: "OK",
    headers: {
      "Content-type": "application/json"
    }
  });
}

/**
 * Refresh the access token by sending a POST request to the backend using the supplied refresh token.
 *
 * TODO: Implement the actual refresh functionality by sending a POST request to the backend
 *
 * @param token The current refresh token
 * @returns A BackendAccessJWT response from the backend.
 */
export async function refresh(token: string): Promise<Response> {
  console.debug("Refreshing token");

  if (!token) {
    throw new Error("Token is required");
  }
  // Verify that the token is valid and not expired
  try {
    jwt.verify(token, secret_signing_salt);
  } catch (err) {
    throw new Error("Refresh token expired");
  }
  const new_access_token: BackendAccessJWT = {
    access: create_access_token()
  };
  return new Response(JSON.stringify(new_access_token), {
    status: 200,
    statusText: "OK",
    headers: {
      "Content-type": "application/json"
    }
  });
}

// Dummy secret salt for signing tokens
const secret_signing_salt = "super-secret-salt";
// Dummy user object
const user: UserObject = {
  id: 1,
  email: "user@email.com",
  name: "Mr User"
};

// Dummy function to create an access token
const create_access_token = (): string => {
  // `iat` and `exp` are generated by the jwt library
  return jwt.sign(
    {
      ...user,
      jti: uuidv4()
    },
    secret_signing_salt,
    {
      algorithm: "HS384",
      expiresIn: "5s" // Refresh token every 5 seconds for testing purposes
    }
  );
};
// Dummy function to create a refresh token
const create_refresh_token = (): string => {
  // `iat` and `exp` are generated by the jwt library
  return jwt.sign(
    {
      ...user,
      jti: uuidv4()
    },
    secret_signing_salt,
    {
      algorithm: "HS384",
      expiresIn: "2m" // Expire refresh token every 2 minutes for testing purposes
    }
  );
};
